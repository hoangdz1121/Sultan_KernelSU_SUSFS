name: Build
permissions:
  contents: write  # Cho phép ghi vào nội dung kho lưu trữ (để đẩy tag)
  actions: write   # Cho phép kích hoạt actions


inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_branch:
    required: true
    type: string
    default: ""
  github_token: # Thêm input mới cho GitHub Token
    required: true
    type: string

runs:
    using: "composite"
    steps:
      - name: Setup Build System
        shell: bash
        run: |
          export DEBIAN_FRONTEND=noninteractive
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          
          df -h
          
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
          sudo docker image prune --all --force
          echo "some directories deleted"
          
          # Remove large unwanted packages (Updated for Ubuntu 24.04)
          sudo apt-get purge -y \
            aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            firefox gfortran-9 google-chrome-stable \
            imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            subversion || true # Removed esl-erlang, gfortran-8, libmysqlclient, mongodb-org as they cause 'Unable to locate package' errors on Ubuntu 24.04
          
          # Regex-based purges (for bulk families like mysql, php, dotnet)
          sudo apt-get purge -y $(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet') || true
          
          # Clean up
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y
          echo "some packages purged"
          
          df -h
          
          # Install dependencies
          echo "Installing Repo and Python"
          sudo apt update
          sudo apt install -y python3 python-is-python3
          
          # Set CONFIG Environment Variable
          echo "CONFIG=${{ inputs.model }}" >> $GITHUB_ENV

      - name: Clone Sultan KernelSU SUSFS Repository
        shell: bash
        run: |
          echo "Cloning WildKernels/Sultan_KernelSU_SUSFS into $CONFIG..."
          # Clone the entire repository into the CONFIG directory
          git clone https://github.com/WildKernels/Sultan_KernelSU_SUSFS.git "$CONFIG"
          cd "$CONFIG"
          
          # Initialize and update submodules (like susfs4ksu)
          echo "Initializing and updating submodules..."
          git submodule update --init --recursive
          
          # Debug print the branches (SUSFS branch is now handled by the submodule)
          echo "Using branch for KernelSU Next: ${{ inputs.ksun_branch }}"
          echo "Using branch for SUSFS (from submodule): ${{ inputs.susfs_branch }}"

      - name: Add KernelSU Next
        shell: bash
        run: |
          echo "Changing to kernel_platform directory: $CONFIG/kernel_platform..."
          cd "$CONFIG/kernel_platform"
          
          echo "Adding KernelSU Next..."
          
          if [ "${{ inputs.ksun_branch }}" == "stable" ]; then
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -
          else
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
          fi
          
          git submodule update --init --recursive # Update KernelSU-Next submodule
          
          # Calculate KernelSU Next version based on remote commits
          BASE_VERSION=10200
          # Use a default branch if ksun_branch is empty or 'stable' for the API call
          KSU_API_BRANCH="${{ inputs.ksun_branch }}"
          if [ -z "$KSU_API_BRANCH" ] || [ "$KSU_API_BRANCH" == "stable" ]; then
            KSU_API_BRANCH="next" # Default to 'next' branch for API if 'stable' or empty
          fi

          # Fetch commit count from GitHub API using the passed token
          KSU_COMMIT_COUNT=$(curl -sI -H "Authorization: Bearer ${{ inputs.github_token }}" "https://api.github.com/repos/KernelSU-Next/KernelSU-Next/commits?sha=$KSU_API_BRANCH&per_page=1" | grep -i "link:" | sed -n 's/.*page=\([0-9]*\)>; rel="last".*/\1/p')
          
          if [ -z "$KSU_COMMIT_COUNT" ]; then
            echo "Warning: Could not fetch KernelSU-Next commit count from API. Falling back to local git count."
            # Fallback to local git count if API fails (e.g., rate limit, no token)
            KSU_COMMIT_COUNT=$(cd KernelSU-Next/kernel && /usr/bin/git rev-list --count HEAD)
          fi

          KSU_VERSION=$(expr $KSU_COMMIT_COUNT "+" $BASE_VERSION)
          
          # Update DKSU_VERSION in KernelSU-Next's Makefile
          # This ensures the KernelSU version in the Makefile matches the fetched version
          sed -i "s/DKSU_VERSION=[0-9]*/DKSU_VERSION=${KSU_VERSION}/" KernelSU-Next/kernel/Makefile || echo "Warning: Could not update DKSU_VERSION in Makefile. It might not exist or format changed."
          
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "KernelSU Next Version: $KSU_VERSION"

      - name: Apply SUSFS Patches
        shell: bash
        run: |
          echo "Changing to kernel_platform directory: $CONFIG/kernel_platform..."
          cd "$CONFIG/kernel_platform"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches from susfs4ksu repository (now relative to $CONFIG)
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/ || true
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/ || true
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ || true
          
          cd ./KernelSU-Next
          
          echo "Applying next SUSFS patches..."
          susfs_version=$(grep '#define SUSFS_VERSION' ../common/include/linux/susfs.h | awk -F'"' '{print $2}')
          echo "SUSVER=$susfs_version" >> $GITHUB_ENV
          echo "SusFS Version: $susfs_version"
          
          # Copy the main SUSFS integration patch for KernelSU-Next (now relative to $CONFIG)
          cp "../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch" "./" || true
          patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
          
          # Apply specific SUSFS fix patches based on version (now relative to $CONFIG)
          case "$susfs_version" in
            "v1.5.5"|"v1.5.6"|"v1.5.7")
              echo "No specific fix patches for SUSFS version $susfs_version."
              ;;
            "v1.5.8"|"v1.5.9")
              cp "../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_apk_sign.c.patch" "./" || true
              patch -p1 --forward --fuzz=3 < fix_apk_sign.c.patch || true

              cp "../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_core_hook.c.patch" "./" || true
              patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch || true

              cp "../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_selinux.c.patch" "./" || true
              patch -p1 --forward --fuzz=3 < fix_selinux.c.patch || true

              cp "../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_ksud.c.patch" "./" || true
              patch -p1 --forward --fuzz=3 < fix_ksud.c.patch || true
              ;;
            *)
              echo "Invalid SUSFS version encountered: $susfs_version. Please update the 'Apply SUSFS Patches' step in action.yml."
              exit 1
              ;;
          esac
          
          # Change to common directory and apply SUSFS patch
          cd ../common
          if [ "${{ inputs.android_version }}" = "android15" ] && [ "${{ inputs.kernel_version }}" = "6.6" ]; then
              if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
                  sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
              else
                  echo "Line already present. Skipping insert."
              fi
          fi
          patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
          
          KERNEL_VERSION="${{ inputs.kernel_version }}"
          MIN_VERSION="5.16"
          
          if [ "$(printf '%s\n' "$KERNEL_VERSION" "$MIN_VERSION" | sort -V | head -n1)" = "$KERNEL_VERSION" ]; then
            echo "Patching ptrace!"
            patch -p1 -F 3 < "../../kernel_patches/gki_ptrace.patch" || true
          else
            echo "Kernel >= $MIN_VERSION, skipping ptrace patch"
          fi
          
          if [ "${{ inputs.model }}" == "OPAce5Pro" ] || [ "${{ inputs.model }}" == "OP13" ]; then
            echo "Patching hmbird!"
            echo 'obj-y += hmbird_patch.o' >> ./drivers/Makefile
            patch -p1 -F 3 < "../../kernel_patches/oneplus/hmbird/hmbird_kernel_patch.patch" || true
            echo "Patching hmbird files!"
            cd ./kernel/sched
            rm -rf ext.c ext.h build_policy.c slim.h slim_sysctl.c
            patch -p1 -F 3 < "../../../../kernel_patches/oneplus/hmbird/hmbird_files_patch.patch" || true
          else
            echo "Not OPAce5Pro / OP13 , skipping fengchi patch"
          fi

      - name: Apply KSUN Hooks
        shell: bash
        run: |
          echo "Changing to kernel_platform/common directory: $CONFIG/kernel_platform/common..."
          cd "$CONFIG/kernel_platform/common"
          echo "Applying KSUN Hooks..."
          # Ensure this path is correct relative to the current directory (./common)
          cp "../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch" "./manual_hooks.patch" || true
          patch -p1 --fuzz=3 < ./manual_hooks.patch || true
          
      - name: Apply Hide Stuff Patches
        shell: bash
        run: |
          echo "Changing to kernel_platform/common directory: $CONFIG/kernel_platform/common..."
          cd "$CONFIG/kernel_platform/common"
          # Apply additional patch
          # Ensure this path is correct relative to the current directory (./common)
          cp "../../kernel_patches/69_hide_stuff.patch" "./" || true
          patch -p1 -F 3 < 69_hide_stuff.patch || true

      - name: Add KernelSU-Next and SUSFS Configuration Settings
        shell: bash
        run: |
          echo "Changing to kernel_platform directory: $CONFIG/kernel_platform..."
          cd "$CONFIG/kernel_platform"
          
          echo "Adding configuration settings to gki_defconfig..."
          
          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig

      - name: Add BBR Support
        shell: bash
        run: |
          echo "Changing to kernel_platform directory: $CONFIG/kernel_platform..."
          cd "$CONFIG/kernel_platform"
          
          echo "Adding configuration settings to gki_defconfig..."
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
          
          echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ_CODEL=y" >> ./common/arch/arm64/configs/gki_defconfig

      - name: Add TTL Target Support
        shell: bash
        run: |
          echo "Changing to kernel_platform directory: $CONFIG/kernel_platform..."
          cd "$CONFIG/kernel_platform"
          
          echo "Adding configuration settings to gki_defconfig..."
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig

      - name: Run sed and perl Commands
        shell: bash
        run: |
          echo "Changing to kernel_platform directory: $CONFIG/kernel_platform..."
          cd "$CONFIG/kernel_platform"
          
          echo "Running sed commands..."
          
          sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' "./common/arch/arm64/configs/gki_defconfig"
          sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "./common/arch/arm64/configs/gki_defconfig"
          sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "./common/arch/arm64/configs/gki_defconfig"
          
          # Run sed commands for modifications
          sed -i 's/check_defconfig//' ./common/build.config.gki
          # For Old setlocalversion Script
          tac ./common/scripts/setlocalversion | sed '0,/echo "\$res"/s//res=\$\(echo \$res \| cut -d- -f1-2\)-OP-Wild\;echo "\$res"\;/' | tac > ./common/scripts/setlocalversion.tmp && mv ./common/scripts/setlocalversion.tmp ./common/scripts/setlocalversion || true
          tac ./msm-kernel/scripts/setlocalversion | sed '0,/echo "\$res"/s//res=\$\(echo \$res \| cut -d- -f1-2\)-OP-Wild\;echo "\$res"\;/' | tac > ./msm-kernel/scripts/setlocalversion.tmp && mv ./msm-kernel/scripts/setlocalversion.tmp ./msm-kernel/scripts/setlocalversion || true
          tac ./external/dtc/scripts/setlocalversion | sed '0,/echo "\$res"/s//res=\$\(echo \$res \| cut -d- -f1-2\)-OP-Wild\;echo "\$res"\;/' | tac > ./external/dtc/scripts/setlocalversion.tmp && mv ./external/dtc/scripts/setlocalversion.tmp ./external/dtc/scripts/setlocalversion || true
          # For New setlocalversion Script
          sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "${KERNELVERSION}-${{ inputs.android_version }}-OP-Wild"/' ./common/scripts/setlocalversion || true
          sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "${KERNELVERSION}-${{ inputs.android_version }}-OP-Wild"/' ./msm-kernel/scripts/setlocalversion || true
          sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "${KERNELVERSION}-${{ inputs.android_version }}-OP-Wild"/' ./external/dtc/scripts/setlocalversion || true
          chmod +x ./common/scripts/setlocalversion || true
          chmod +x ./msm-kernel/scripts/setlocalversion || true
          chmod +x ./external/dtc/scripts/setlocalversion || true
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl || echo "No stamp.bzl!"
          sed -i 's/-dirty//' ./common/scripts/setlocalversion || true
          sed -i 's/-dirty//' ./msm-kernel/scripts/setlocalversion || true
          sed -i 's/-dirty//' ./external/dtc/scripts/setlocalversion || true
          sed -i 's/-dirty//' ./build/kernel/kleaf/workspace_status_stamp.py || echo "No workspace_status_stamp.py!"
          
          sed -i '/echo "LTO $LTO "/i export LTO=thin' ./oplus/build/oplus_setup.sh || true
          sed -i 's/export REPACK_IMG=true/export REPACK_IMG=false/g' ./oplus/build/oplus_setup.sh || true
         
          # Run perl command to modify UTS_VERSION
          DATESTR=$(date -u)
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT $DATESTR"}' ./common/scripts/mkcompile_h || true
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT $DATESTR"}' ./msm-kernel/scripts/mkcompile_h || true

      - name: Build the Kernel
        shell: bash
        run: |
          echo "Changing to cloned repository root directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Building the kernel..."
          # Clear Cache
          sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches'
          
          rm ./kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm ./kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          
          BUILD_TYPE="gki"
          BAZEL_ARGS=(--jobs=$(nproc --all) --lto=thin)
          if [ "${{ inputs.soc }}" == "sun" ] || [ "${{ inputs.soc }}" == "sm8750" ]; then
            BUILD_TYPE="perf"
            BAZEL_ARGS+=(-g)
          fi
          
          (stdbuf -oL bash -c '
            while true; do
              echo "=== $(date) ==="
              free -h
              echo "======"
              df -h
              echo "======"
              top -b -n 1 | head -n 15
              echo ""
              sleep 60
            done
          ') &
          MONITOR_PID=$!
          trap "kill $MONITOR_PID" EXIT
          
          if [ -f ./kernel_platform/build_with_bazel.py ]; then
            ./kernel_platform/oplus/bazel/oplus_modules_variant.sh ${{ inputs.soc }} "$BUILD_TYPE" ""
            ./kernel_platform/build_with_bazel.py -t ${{ inputs.soc }} $BUILD_TYPE "${BAZEL_ARGS[@]}" -o "$(pwd)/out"
          else
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ inputs.soc }} "$BUILD_TYPE"
          fi

      - name: Create ZIP Files for Different Formats
        shell: bash
        run: |
          echo "Changing to cloned repository root directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Copying Image"
          # Đường dẫn đã được điều chỉnh: Image sẽ nằm trong ./out/dist/
          cp ./out/dist/Image ./AnyKernel3/Image
          
          echo "Navigating to AnyKernel3 directory..."
          # Đường dẫn đã được điều chỉnh
          cd ./AnyKernel3
          
           if [ "${{ inputs.model }}" == "OPAce5Pro" ] || [ "${{ inputs.model }}" == "OP13" ]; then
            # Đường dẫn đã được điều chỉnh
            cp ../kernel_patches/oneplus/hmbird/bins/* ./tools/
            # Đường dẫn đã được điều chỉnh
            patch -F 3 < ../kernel_patches/oneplus/hmbird/ak3_hmbird_patch.patch || true
          fi
          
          # Zip the files in the AnyKernel3 directory with a new naming convention
          ZIP_NAME="AnyKernel3_${{ inputs.model }}_${{ inputs.android_version }}-${{ inputs.kernel_version }}_Next_${{ env.KSUVER }}_SUSFS_${{ env.SUSVER }}.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.CONFIG }}
          path: |
            *.zip
